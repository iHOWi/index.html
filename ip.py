import os
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
import pytz
from datetime import datetime
import random
from http.server import BaseHTTPRequestHandler, HTTPServer
import threading

# –ö–æ–Ω—Ñ–∏–≥
TOKEN = os.getenv("TOKEN", "8009426826:AAHgd0hmxREuMxSnm2HDkyyF62CIRVRtrlk")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@ip_searcher")
PORT = int(os.getenv("PORT", 10000))
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://ipsearchur-ru.onrender.com/8009426826:AAHgd0hmxREuMxSnm2HDkyyF62CIRVRtrlk")

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
users_db = {}

### –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ###
RUSSIAN_INSULTS = [
    "–ø–∏–¥—Ä", "–ø–∏–¥–æ—Ä", "–ø–∏–¥–æ—Ä–∞—Å", "—Ö—É–µ—Å–æ—Å", "—Å—É–∫–∞", "—Å–∫–æ—Ç–∏–Ω–∞", 
    "–ø–∏–∑–¥—é–∫", "—É–µ–±–∞–Ω", "–¥–æ–ª–±–∞–µ–±", "–º—É–¥–∞–∫", "–≥–∞–Ω–¥–æ–Ω", "–¥–µ–±–∏–ª",
    "—Ç—É–ø–æ–π", "–ª–æ—Ö", "—á–º–æ", "–¥–æ–ª–±–æ–µ–±", "–ø—Ä–∏–¥—É—Ä–æ–∫", "–∫—Ä–µ—Ç–∏–Ω",
    "–∏–¥–∏–æ—Ç", "–¥—É—Ä–∞–∫", "—Ç—É–ø–∏—Ü–∞", "–∑–∞—Å—Ä–∞–Ω–µ—Ü", "—Å—É—á–∫–∞", "–º—Ä–∞–∑—å",
    "–ø–∞–¥–ª–∞", "—Å–≤–æ–ª–æ—á—å", "—É–±–ª—é–¥–æ–∫", "–≤—ã–±–ª—è–¥–æ–∫", "–∂–æ–ø–∞", "–≥–æ–≤–Ω–æ", "–ø–æ—à–µ–ª –Ω–∞—Ö—É–π", "–ø–∏–¥–æ—Ä–∞—Å –µ–±–∞–Ω—ã–π", "–º–∞—Ç—å", "–º–∞–º–∫–∞", "—à–ª—é—Ö–∞", "–º–∞—Ç—å —à–ª—é—Ö–∞"
]

# –ì—Ä—É–±—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è
RUDE_RESPONSES = [
    "–¢—ã –Ω–µ –ª—É—á—à–µ, –∫—É—Å–æ–∫ –≥–æ–≤–Ω–∞",
    "–ø–æ—à–µ–ª –Ω–∞—Ö—É–π, —É—ë–±–∏—â–µ",
    "–ü–æ—à–µ–ª –Ω–∞—Ö—É–π, –¥–µ–±–∏–ª",
    "–ó–∞—Ç–∫–Ω–∏—Å—å, –¥–æ–ª–±–∞–µ–±",
    "–¢—ã –º–Ω–µü§£ü§£ ? –î–∞ —Ç—ã —Å–∞–º –ø–æ–ª–Ω–æ–µ –¥–µ—Ä—å–º–æ",
    "–í–∞–ª—è–π –æ—Ç—Å—é–¥–∞, –º—Ä–∞–∑—å",
    "–Ø –± —Ç–µ–±–µ –æ—Ç–≤–µ—Ç–∏–ª, –Ω–æ —Ç—ã —Ç–æ–≥–æ –Ω–µ —Å—Ç–æ–∏—à—å, –º—É–¥–∏–ª–∞",
    "–¢—ã –≤–æ–æ–±—â–µ –∫—Ç–æ —Ç–∞–∫–æ–π, –≥–æ–≤–Ω–æ–µ–¥?",
    "–ò–¥–∏ –≤ –ø–µ–Ω—å, —É—Ä–æ–¥",
    "–ó–∞–∫—Ä–æ–π —Ä–æ—Ç, –ø–æ–∫–∞ –∑—É–±–æ–≤ –Ω–µ –ª–∏—à–∏–ª—Å—è, –º—É–¥–∏–ª–∞",
    "–õ–∞–≤–∞—à –≥–∞–≤—è–¥–∏–Ω–∞ —Ç–≤–∞—è –º–∞–º–∫–∞ –±–ª—è–¥–∏–Ω–∞",
    "–ï–±–∞—Ç—å —Ç—ã –¥–æ–ª–±–∞–µ–±, –±–æ—Ç–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –æ–Ω –∑–∞—Ç—Ä–æ–ª–∏—Ç—å ü§£", 
    "–ü–∏–∑–¥—é–∫, –∏–¥–∏ –Ω–∞—Ö—É–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
]

async def handle_insults(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–≤–µ—Ç –Ω–∞ –º–∞—Ç—ã"""
    user_message = update.message.text.lower()
    if any(insult in user_message for insult in RUSSIAN_INSULTS):
        await update.message.reply_text(random.choice(RUDE_RESPONSES))
        return True
    return False

### –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ###
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å IP", callback_data='check_ip')],
        [InlineKeyboardButton("üìä –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data='referrals')],
        [InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID[1:]}")]
    ]
    
    user = update.effective_user
    text = (
        f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b>\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP-–∞–¥—Ä–µ—Å–æ–≤\n\n"
        f"<b>–í–∞—à ID:</b> <code>{user.id}</code>\n"
        f"<b>–ó–∞–ø—Ä–æ—Å—ã:</b> {users_db.get(user.id, {}).get('tokens', 5)}"
    )
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")
    else:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")

### –ü—Ä–æ–≤–µ—Ä–∫–∞ IP ###
def get_ip_info(ip: str) -> str:
    try:
        response = requests.get(f"http://ip-api.com/json/{ip}?fields=66846719&lang=ru", timeout=5).json()
        if response["status"] == "fail":
            return f"‚ùå –û—à–∏–±–∫–∞: {response['message']}"
            
        return f"""
üîç <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ IP:</b>
<b>–°—Ç—Ä–∞–Ω–∞:</b> {response.get('country', 'N/A')}
<b>–ì–æ—Ä–æ–¥:</b> {response.get('city', 'N/A')}
<b>–ü—Ä–æ–≤–∞–π–¥–µ—Ä:</b> {response.get('isp', 'N/A')}
"""
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

### –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ###
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_db:
        users_db[user_id] = {'tokens': 5, 'referrals': set()}
    await show_main_menu(update, context)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'check_ip':
        if users_db[query.from_user.id]['tokens'] <= 0:
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!")
            return
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å:")
        context.user_data['waiting_for_ip'] = True
        
    elif query.data == 'referrals':
        ref_link = f"https://t.me/{(await context.bot.get_me()).username}?start={query.from_user.id}"
        await query.edit_message_text(
            f"üìä –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {len(users_db[query.from_user.id]['referrals'])}\n"  # <- –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –¥–ª—è len()
            f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{ref_link}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]])
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await handle_insults(update, context):
        return
        
    if context.user_data.get('waiting_for_ip'):
        ip_info = get_ip_info(update.message.text)
        if not ip_info.startswith("‚ùå"):
            users_db[update.effective_user.id]['tokens'] -= 1
        await update.message.reply_text(ip_info, parse_mode="HTML")
        await show_main_menu(update, context)

### Health-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ###
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_health_server():
    server = HTTPServer(('0.0.0.0', 8080), HealthHandler)
    server.serve_forever()

### –ó–∞–ø—É—Å–∫ ###
def main():
    # Health-—Å–µ—Ä–≤–µ—Ä
    threading.Thread(target=run_health_server, daemon=True).start()
    
    # –ë–æ—Ç
    app = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # Webhook –∏–ª–∏ Polling
    if WEBHOOK_URL:
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=f"{WEBHOOK_URL}/{TOKEN}"
        )
    else:
        app.run_polling()

if __name__ == "__main__":
    main()
