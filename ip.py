import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import time
from datetime import datetime, time as dt_time
import pytz
import random

# –°–ø–∏—Å–æ–∫ —Ä—É—Å—Å–∫–∏—Ö —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤
RUSSIAN_INSULTS = [
    "–ø–∏–¥—Ä", "–ø–∏–¥–æ—Ä", "–ø–∏–¥–æ—Ä–∞—Å", "—Ö—É–µ—Å–æ—Å", "—Å—É–∫–∞", "—Å–∫–æ—Ç–∏–Ω–∞", 
    "–ø–∏–∑–¥—é–∫", "—É–µ–±–∞–Ω", "–¥–æ–ª–±–∞–µ–±", "–º—É–¥–∞–∫", "–≥–∞–Ω–¥–æ–Ω", "–¥–µ–±–∏–ª",
    "—Ç—É–ø–æ–π", "–ª–æ—Ö", "—á–º–æ", "–¥–æ–ª–±–æ–µ–±", "–ø—Ä–∏–¥—É—Ä–æ–∫", "–∫—Ä–µ—Ç–∏–Ω",
    "–∏–¥–∏–æ—Ç", "–¥—É—Ä–∞–∫", "—Ç—É–ø–∏—Ü–∞", "–∑–∞—Å—Ä–∞–Ω–µ—Ü", "—Å—É—á–∫–∞", "–º—Ä–∞–∑—å",
    "–ø–∞–¥–ª–∞", "—Å–≤–æ–ª–æ—á—å", "—É–±–ª—é–¥–æ–∫", "–≤—ã–±–ª—è–¥–æ–∫", "–∂–æ–ø–∞", "–≥–æ–≤–Ω–æ", "–ø–æ—à–µ–ª –Ω–∞—Ö—É–π", "–ø–∏–¥–æ—Ä–∞—Å –µ–±–∞–Ω—ã–π", "–º–∞—Ç—å", "–º–∞–º–∫–∞", "—à–ª—é—Ö–∞", "–º–∞—Ç—å —à–ª—é—Ö–∞"
]

# –ì—Ä—É–±—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è
RUDE_RESPONSES = [
    "–¢—ã –Ω–µ –ª—É—á—à–µ, –∫—É—Å–æ–∫ –≥–æ–≤–Ω–∞",
    "–ø–æ—à–µ–ª –Ω–∞—Ö—É–π, —É—ë–±–∏—â–µ",
    "–ü–æ—à–µ–ª –Ω–∞—Ö—É–π, –¥–µ–±–∏–ª",
    "–ó–∞—Ç–∫–Ω–∏—Å—å, –¥–æ–ª–±–∞–µ–±",
    "–¢—ã –º–Ω–µü§£ü§£ ? –î–∞ —Ç—ã —Å–∞–º –ø–æ–ª–Ω–æ–µ –¥–µ—Ä—å–º–æ",
    "–í–∞–ª—è–π –æ—Ç—Å—é–¥–∞, –º—Ä–∞–∑—å",
    "–Ø –± —Ç–µ–±–µ –æ—Ç–≤–µ—Ç–∏–ª, –Ω–æ —Ç—ã —Ç–æ–≥–æ –Ω–µ —Å—Ç–æ–∏—à—å, –º—É–¥–∏–ª–∞",
    "–¢—ã –≤–æ–æ–±—â–µ –∫—Ç–æ —Ç–∞–∫–æ–π, –≥–æ–≤–Ω–æ–µ–¥?",
    "–ò–¥–∏ –≤ –ø–µ–Ω—å, —É—Ä–æ–¥",
    "–ó–∞–∫—Ä–æ–π —Ä–æ—Ç, –ø–æ–∫–∞ –∑—É–±–æ–≤ –Ω–µ –ª–∏—à–∏–ª—Å—è, –º—É–¥–∏–ª–∞",
    "–õ–∞–≤–∞—à –≥–∞–≤—è–¥–∏–Ω–∞ —Ç–≤–∞—è –º–∞–º–∫–∞ –±–ª—è–¥–∏–Ω–∞"
    "–ï–±–∞—Ç—å —Ç—ã –¥–æ–ª–±–∞–µ–±, –±–æ—Ç–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –æ–Ω –∑–∞—Ç—Ä–æ–ª–∏—Ç—å ü§£", 
    "–ü–∏–∑–¥—é–∫, –∏–¥–∏ –Ω–∞—Ö—É–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
]

# IMPORTANT: Replace with your actual bot token
TOKEN = "8009426826:AAHgd0hmxREuMxSnm2HDkyyF62CIRVRtrlk" # Please ensure this is your correct token
CHANNEL_ID = "@ip_searcher"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞

# "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
users_db = {
    # user_id: {
    #     'referrals': set(),  # —Ä–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #     'tokens': 5,         # –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
    #     'last_check': None,  # –ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    #     'referrer': None     # –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # }
}

async def handle_insults(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –≥—Ä—É–±–æ"""
    user_message = update.message.text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ
    for insult in RUSSIAN_INSULTS:
        if insult in user_message:
            response = random.choice(RUDE_RESPONSES)
            await update.message.reply_text(response)
            return True
    
    return False

async def check_subscription(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """
    Checks if a user is subscribed to the specified channel.
    """
    try:
        member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception:
        return False

async def update_tokens_daily():
    """
    Updates daily tokens for users.
    Users get 3 tokens if their current tokens are less than 5, once per day after midnight MSK.
    """
    moscow_tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(moscow_tz)
    
    for user_id, user_data in users_db.items():
        last_check = user_data.get('last_check')
        
        # Check if it's a new day since the last check
        if not last_check or (now.date() > last_check.date()):
            # Award tokens only if current tokens are less than 5
            if user_data['tokens'] < 5:
                user_data['tokens'] += 3
                if user_data['tokens'] > 5: # Cap at 5 tokens
                    user_data['tokens'] = 5
            user_data['last_check'] = now

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handles the /start command, initializes user data, checks referrals, and subscription.
    """
    user_id = update.effective_user.id
    
    # Initialize user in the database if not exists
    if user_id not in users_db:
        users_db[user_id] = {
            'referrals': set(),
            'tokens': 5,
            'last_check': None,
            'referrer': None
        }
    
    # Process referral link if provided
    if context.args:
        try:
            referrer_id = int(context.args[0])
            # Ensure referrer is not the user themselves and exists in DB, and user hasn't been referred before
            if referrer_id != user_id and referrer_id in users_db and users_db[user_id]['referrer'] is None:
                users_db[user_id]['referrer'] = referrer_id
                users_db[referrer_id]['referrals'].add(user_id)
                
                # Award 3 tokens to the referrer
                users_db[referrer_id]['tokens'] += 3
                if users_db[referrer_id]['tokens'] > 100: # Cap referral tokens to prevent abuse
                    users_db[referrer_id]['tokens'] = 100 
                # Notify referrer about new referral
                await context.bot.send_message(
                    chat_id=referrer_id,
                    text=f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ. "
                         f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ +3 –∑–∞–ø—Ä–æ—Å–∞. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users_db[referrer_id]['tokens']} –∑–∞–ø—Ä–æ—Å–æ–≤."
                )
        except (ValueError, KeyError):
            pass # Ignore invalid referrer IDs
    
    # Check channel subscription
    is_subscribed = await check_subscription(user_id, context)
    
    if not is_subscribed:
        await update.message.reply_text(
            "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_ID[1:]}")],
                [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data='check_subscription')]
            ])
        )
        return
    
    await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Displays the main menu to the user.
    Handles both initial message and callback query edits.
    """
    # Determine the user based on whether it's a Message or CallbackQuery
    if isinstance(update, Update) and update.callback_query:
        # If update has a callback_query (meaning it's from a button press)
        user_id = update.callback_query.from_user.id
        user_first_name = update.callback_query.from_user.first_name
        message_to_edit = update.callback_query.message
    else: 
        # If update is a Message (e.g., from /start command or direct text input)
        user_id = update.effective_user.id
        user_first_name = update.effective_user.first_name
        message_to_edit = update.message
    
    # Update tokens before showing the menu
    await update_tokens_daily()
    
    keyboard = [
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å IP", callback_data='check_ip')],
        [InlineKeyboardButton("üìä –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data='referrals')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')],
        [InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID[1:]}")]
    ]
    
    text = (
        f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user_first_name}!</b>\n\n" 
        "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP-–∞–¥—Ä–µ—Å–æ–≤\n\n"
        f"<b>–í–∞—à ID:</b> <code>{user_id}</code>\n"
        f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b> {users_db[user_id]['tokens']}\n\n"
        f"<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f"<code>https://t.me/{(await context.bot.get_me()).username}?start={user_id}</code>\n\n"
        "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +3 –∑–∞–ø—Ä–æ—Å–∞!"
    )
    
    # Now, use the message_to_edit or update.message correctly
    if isinstance(update, Update) and update.callback_query:
        await message_to_edit.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else: 
        await update.message.reply_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handles all inline keyboard button presses.
    """
    query = update.callback_query
    await query.answer() # Acknowledge the callback query
    
    user_id = query.from_user.id
    
    if query.data == 'check_subscription':
        is_subscribed = await check_subscription(user_id, context)
        
        if is_subscribed:
            # Pass the original 'query' object (which is an Update type with a callback_query)
            await show_main_menu(update, context) 
        else:
            await query.edit_message_text(
                "‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_ID[1:]}")],
                    [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data='check_subscription')]
                ])
            )
    
    elif query.data == 'check_ip':
        if users_db[user_id]['tokens'] <= 0:
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã!\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ:\n"
                "1. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ (+3 –∑–∞–ø—Ä–æ—Å–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ)\n"
                "2. –ü–æ–¥–æ–∂–¥–∞—Ç—å –¥–æ –∑–∞–≤—Ç—Ä–∞ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è +3 –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ —É –≤–∞—Å –º–µ–Ω—å—à–µ 5)",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìä –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data='referrals')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
                ])
            )
            return
        
        await query.edit_message_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:",
            parse_mode="HTML"
        )
        context.user_data['waiting_for_ip'] = True
        
    elif query.data == 'referrals':
        # Check channel subscription for referral page access
        is_subscribed = await check_subscription(user_id, context)
        if not is_subscribed:
            await query.edit_message_text(
                "‚ùå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_ID[1:]}")],
                    [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data='check_subscription')]
                ])
            )
            return
        
        ref_count = len(users_db[user_id]['referrals'])
        
        await query.edit_message_text(
            f"üìä <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{ref_count}</b>\n"
            f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: <b>{users_db[user_id]['tokens']}</b>\n\n"
            f"<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
            f"<code>https://t.me/{(await context.bot.get_me()).username}?start={user_id}</code>\n\n"
            "–ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +3 –∑–∞–ø—Ä–æ—Å–∞!",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ])
        )
    
    elif query.data == 'settings':
        await query.edit_message_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:</b>\n\n"
            "–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∫–æ–≥–¥–∞ —è –∏—Ö –¥–æ–±–∞–≤–ª—é üòä",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ])
        )
    
    elif query.data == 'back_to_main':
        # Pass the original 'update' object (which is a CallbackQuery type)
        await show_main_menu(update, context) 

def get_ip_info(ip: str) -> str:
    """
    Fetches IP information from ip-api.com.
    """
    url = f"http://ip-api.com/json/{ip}?fields=66846719&lang=ru"
    try:
        response = requests.get(url, timeout=5).json() 
    except requests.exceptions.RequestException as e:
        return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> {e}"
    
    if response.get("status") == "fail":
        return f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {response.get('message')}"
    
    info = f"""
üîç <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ</b> <code>{response.get('query', 'N/A')}</code>:

<b>üìç –õ–æ–∫–∞—Ü–∏—è:</b>
‚Ä¢ <i>–°—Ç—Ä–∞–Ω–∞:</i> {response.get('country', 'N/A')} ({response.get('countryCode', 'N/A')})
‚Ä¢ <i>–†–µ–≥–∏–æ–Ω:</i> {response.get('regionName', 'N/A')}
‚Ä¢ <i>–ì–æ—Ä–æ–¥:</i> {response.get('city', 'N/A')}
‚Ä¢ <i>–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å:</i> {response.get('zip', 'N/A')}
‚Ä¢ <i>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</i> {response.get('lat', 'N/A')}, {response.get('lon', 'N/A')}

<b>üåê –°–µ—Ç—å:</b>
‚Ä¢ <i>–ü—Ä–æ–≤–∞–π–¥–µ—Ä:</i> {response.get('isp', 'N/A')}
‚Ä¢ <i>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</i> {response.get('org', 'N/A')}
‚Ä¢ <i>AS:</i> {response.get('as', 'N/A')}

<b>‚è∞ –í—Ä–µ–º—è:</b>
‚Ä¢ <i>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</i> {response.get('timezone', 'N/A')}

<b>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ <i>–ü—Ä–æ–∫—Å–∏/VPN:</i> {'‚úÖ –î–∞' if response.get('proxy') or response.get('hosting') else '‚ùå –ù–µ—Ç'}
"""
    return info.strip()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handles incoming text messages, primarily for IP checking.
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    if await handle_insults(update, context):
        return
    
    user_id = update.effective_user.id
    
    # Check channel subscription for any message
    is_subscribed = await check_subscription(user_id, context)
    if not is_subscribed:
        await update.message.reply_text(
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_ID[1:]}")],
                [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data='check_subscription')]
            ])
        )
        return
    
    if context.user_data.get('waiting_for_ip'):
        user_input = update.message.text.strip()
        
        if not user_input:
            await update.message.reply_text("‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω!</b>", parse_mode="HTML")
            return
        
        # Check token count
        if users_db[user_id]['tokens'] <= 0:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã!\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ:\n"
                "1. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ (+3 –∑–∞–ø—Ä–æ—Å–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ)\n"
                "2. –ü–æ–¥–æ–∂–¥–∞—Ç—å –¥–æ –∑–∞–≤—Ç—Ä–∞ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è +3 –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ —É –≤–∞—Å –º–µ–Ω—å—à–µ 5)",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìä –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data='referrals')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
                ])
            )
            del context.user_data['waiting_for_ip']
            return
        
        await update.message.reply_text("‚è≥ <i>–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...</i>", parse_mode="HTML")
        
        try:
            ip_info = get_ip_info(user_input)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç API
            if ip_info.startswith("‚ùå"):
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ù–ï —Å–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã
                await update.message.reply_text(
                    ip_info,
                    parse_mode="HTML",
                    reply_to_message_id=update.message.message_id
                )
            else:
                # –¢–æ–∫–µ–Ω—ã —Å–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
                users_db[user_id]['tokens'] -= 1
                await update.message.reply_text(
                    ip_info + f"\n\n<b>–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {users_db[user_id]['tokens']}",
                    parse_mode="HTML",
                    reply_to_message_id=update.message.message_id
                )
                
        except Exception as e:
            # –ü—Ä–∏ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö —Ç–æ–∂–µ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã
            await update.message.reply_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {str(e)}",
                parse_mode="HTML",
                reply_to_message_id=update.message.message_id
            )
        
        del context.user_data['waiting_for_ip']
        await show_main_menu_after_action(update, context)
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º")

async def show_main_menu_after_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Displays the main menu after an action (like IP check).
    Always uses reply_text for this specific scenario as it's a new message after user input.
    """
    user_id = update.effective_user.id
    keyboard = [
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å IP", callback_data='check_ip')],
        [InlineKeyboardButton("üìä –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data='referrals')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')],
        [InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID[1:]}")]
    ]
    
    text = (
        "üîπ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> üîπ\n\n"
        f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b> {users_db[user_id]['tokens']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await update.message.reply_text(
        text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def main():
    """
    Main function to set up and run the Telegram bot.
    """
    app = Application.builder().token(TOKEN).build()
    
    # Handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # Run the bot
    print("Bot started polling...")
    app.run_polling(poll_interval=1.0) 

if __name__ == "__main__":
    main()